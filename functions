#!/bin/bash

#function each-dir {
  #curr="$PWD"
  #func="$1"
  #for i in `ls` do
    #echo "doing $func in $i"
    #cd "$i"
    #eval "$func"
    #cd "$curr"
  #done
#}

#function git-update-all {
  #each-dir "git remote update"
#}

#function bundle-all {
  #each-dir "git remote update"
#}


if [ $OSX ] ; then
  function lein() {
    # because lein doesn't like the TERM iTerm2 seems to give it.
    TERM=dumb command lein $@
    return $!
  }
fi


function set_color() {
  color=$1; val=$2;
  shift; shift;

  case $color in
    "RED")     printf "%s" "\[\033[0;31m\]$val\[\033[0m\]" ;;
    "YELLOW")  printf "%s" "\[\033[0;33m\]$val\[\033[0m\]" ;;
    "GREEN")   printf "%s" "\[\033[0;32m\]$val\[\033[0m\]" ;;
    "LGTGRN")  printf "%s" "\[\033[1;32m\]$val\[\033[0m\]" ;;
    "BLUE")    printf "%s" "\[\033[0;36m\]$val\[\033[0m\]" ;;
    "BROWN")   printf "%s" "\[\033[0;33m\]$val\[\033[0m\]" ;;
    "PURPLE")  printf "%s" "\[\033[0;35m\]$val\[\033[0m\]" ;;
    *)         printf "%s" "$val" ;;
  esac
}

function squish_spaces() {
  echo "$(echo "$1" | sed -nE 's/\ +/ /pg')"
}

function fup() {
  [ "$1" = "dup" ] && cp "$2" "$3" && return 0;
}

function line-count {
  find "${1:-.}" -name "${2:-*.rb}" -exec cat {} \; | grep -vE '^\s*#' | grep -vE '^\s*$' | wc -l
}

function go {
  git remote update -p
  git rebase origin/master

  if [ -e Gemfile ] ; then
    echo 'detected bundler, running `bundle install`'
    bundle
  fi

  if [ -e Rakefile ] ; then
    echo 'detected rake, running default task'
    if rake ; then
      echo "Tests passed!"
    else
      echo "Oh Noes! FAIL"
    fi
  fi
}

function do-after {
  sleep `echo "$1" | bc` && $2
}

function y {
  [ $? = 0 ] && $@
}

function n {
  [ $? = 0 ] || $@
}

function maildir {
  local name="$1"
  mkdir -p $1/{cur,new,tmp}
}

function cl {
  /usr/bin/clear
  tmux clear-history
  tmux clear-history
}

function mw {
  tmux move-window -t $1
}

function rs {
  tmux resize-pane -$1 $2
}

function gt {
  tmux select-window -t $1
}

function sw {
  #need defaulting
  mw $1 9999;
  mw $2 $1;
  mw $1 $2;
}



function puppet-mod {
  mkdir -p "$1/{files,manifests,lib,tests,templates}"
}

function push-with-keyswap {
  git push origin master
  ssh-add -D
  ssh-add ~/.ssh/heroku
  git push heroku master
}

function ignore {
  if [ -z "$1" ] ; then
    cat .gitignore
  else
    if git status --porcelain | grep -vE '^[? ]' ; then
      echo "There is staged work, please commit or reset it"
      return 1
    fi

    echo "$1" >> .gitignore 
    git add .gitignore
    git commit -m "ignore $1"
  fi

  return 0
}


function perg {
  tac $2 | grep $1
}

function update-submodules {
  git stash
  git submodule foreach "git remote update origin -p"
  git submodule foreach "git reset --hard origin/master"
  git commit -am "bump submodule"
  git stash pop
}

function hitch {
  command hitch "$@"
  if [[ -s "$HOME/.hitch_export_authors" ]] ; then source "$HOME/.hitch_export_authors" ; fi
}
alias unhitch='hitch -u'
# hitch

function push-ci {
  git push ${1:-origin} $(git branch | grep \* | cut -c 3-):jf-ci -f
}

function local-changes {
  if [ -z $1 ] ; then
    git cherry-pick local-changes
    git reset HEAD^
    cd .
  else 
    git reset --hard
    git clean -f 
  fi
}

function update-gemfile {
  rm Gemfile.lock
  bundle
  git add Gemfile.lock
}

function build-ri() {
  gem rdoc --all --ri --no-rdoc 2>/dev/null
}

function fucking_json_pp() {
  curl $1 | node -e 'ε="";θ=process;β=θ.stdin;γ=JSON;β.on("data",function(τ){ε+=τ}),β.on("end",function(){θ.stdout.write(γ.stringify(γ.parse(ε),γ.χ,2))}),β.resume();'
}

function update_local_quill_content() {
  local url="http://congruentsys:22tango@author.cds-onc.com/versions/most_recent.json"

  curl "$url" | foreman run bundle exec rails runner 'Version.create! content_json: $stdin.read'
}

function new-foreman() {
  local key=".env.${1:-dev}"
  local cmd=$2
  shift ; shift

  function _init() {
    if [ -e '.env.example' ] ; then
      echo "found .env.example, copying them to .env.dev and .env.test"
      cp .env.example .env.dev
      cp .env.example .env.test
    else
      echo "no .env.example found, creating empty .env.dev and .env.test"
      touch .env.dev
      touch .env.test
    fi
    return 0
  }

  case $cmd in
    edit) $EDITOR $key               ;;
    init) _init                      ;;
       *) command foreman -e $key $@ ;;
  esac

  unset _init
}

#function vim() {
  #if [ $# -ne 0 ] ; then
    #local args="--remote-silent $@"
  #fi
  #builtin command vim --servername ${DEFAULT_VIMSERVER:=$VIMSERVER} $args
#}

function migration {
  # must be run from the rails root
  [ ! -e 'db/migrate/' ] && { echo "You need to execute this from the rails root" ; return 1 ; }

  # figure out if we're doing DM or AR
  local orm=ActiveRecord
  grep dm-migrations Gemfile.lock &>/dev/null && orm=DataMapper

  local migration_name="$1"
  local datestamp="$(date +'%Y%m%d%H%M%S')"
  local file="./db/migrate/$datestamp""_$migration_name.rb"

  touch $file
  if [ "$orm" = "ActiveRecord" ] ; then
    cat <<AR>$file
class Migration_$datestamp < ActiveRecord::Migration
  # $migration_name
  def change

  end
end
AR
  else
    cat <<DM>$file
migration $datestamp, :$migration_name do
  up do
  end

  down do
  end
end
DM
  fi

  $EDITOR $file
}


